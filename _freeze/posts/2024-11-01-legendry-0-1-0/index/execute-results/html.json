{
  "hash": "770baf4a242e4049643672625e96409f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Guidance for legendry\"\ndescription: \"Wherein I announce a new package to expand your arsenal of guides\"\nauthor: \"Teun van den Brand\"\ndate: \"2024-11-01\"\nimage: legendry.png\ncategories: [package, announcement]\n---\n\n\n\n<p><img src=\"legendry.png\" align=\"right\" style=\"width:50%;max-width:200px;margin-left:20pt\"/></p>\n\nI'm glad to announce that the [legendry](https://teunbrand.github.io/legendry/) package has landed on [CRAN](https://cran.r-project.org/package=legendry)!\nIt is a [ggplot2](https://ggplot2.tidyverse.org/) extension package, focussed on expanding the guide options.\nIf you're looking to try out legendry yourself, you can install it with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"legendry\")\n```\n:::\n\n\n\nI like plot annotations. \nGuides are among the most important plot annotations, as they instruct an observer on how a graphic should be interpreted.\nThey are essential in getting the data to divulge their story.\n\nI've always found it hard to place annotations outside the panels of a plot and usually resorted to post-editing the figures in vector graphics software such as Adobe Illustrator to nicely place these.\nHowever, as people might be aware, it can take several iterations to get from the first serious figure to the final figure you use in your communication.\nThis makes editing the figures every time very cumbersome.\nIn addition, it is not reproducible, so we should aim to incorporate some flexibility in annotating our figures.\nThis package is my attempt at that.\n\n\n\n\n\n\n\n## Growing this package\n\nThe seed that sprouted this package germinated in April 2020. \nHey, it was at a time when *we all* were looking into alternate hobbies when the lockdowns started!\nIn any case, the idea started as [`guide_axis_nested()`](https://teunbrand.github.io/ggh4x/reference/guide_axis_nested.html) in [ggh4x](https://teunbrand.github.io/ggh4x/), which was ultimately reincarnated as: ... [`guide_axis_nested()`](https://teunbrand.github.io/legendry/reference/guide_axis_nested.html).\n\nHowever, I took some convincing to take the guide related functionality in ggh4x and make an offshoot package.\n(Like any self-respecting amateur developer, I had no idea what the scope of ggh4x should be). \nThe first graft of this offshoot was called 'gguidance', traditionally using the 'gg'-prefix before ggplot2 extension packages, and it was about guides 🤷️.Nobody, including myself knew how to pronounce this name, so that is how 'legendry' was born.\n\nAt the time, [the issue](https://github.com/tidyverse/ggplot2/issues/3329) was that the guide system, as one of the last vestiges in ggplot2, was still written in the S3 object oriented programming style.\nThis lacked the great extensibility of other ggplot2 systems, like stats, geoms or facets that all uses the rather specialised —but highly flexible— ggproto system. \nAs such, the guide system was explicitly advertised as *not* an extension point.\n\nIt took a bit of path clearing to build legendry.\nTo cut a long story significantly shorter: I volunteered for the rewrite, got offered a job maintaining ggplot2, and midwifed the 3.5.0 release of ggplot2 which formally makes guides an extension point.\n\n## Concepts in legendry\n\nThe package has [website](https://teunbrand.github.io/legendry/index.html) including vignettes to talk you through most of its functionality.\nAs such, I'll try to convey the big picture ideas here and leave the details up for you to peruse at your leisure.\n\n### Scale interaction\n\nPerhaps the most gentle introduction is legendry is that you now have the power to intervene in what scales pass on to guides. Most guides in legendry accept a `key` argument, that you can customise to some degree. You can read more in the [vignette](https://teunbrand.github.io/legendry/articles/keys.html), but here are three examples using axes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(legendry)\n#> Loading required package: ggplot2\n\nggplot(msleep, aes(sleep_total, bodywt)) +\n  geom_point(na.rm = TRUE) +\n  scale_y_log10() +\n  guides(\n    # A regular key, but add minor ticks\n    x = guide_axis_base(key = \"minor\", title = \"Total sleep (hours)\"),\n    # A log key\n    y = guide_axis_base(key = \"log\", title = \"Body weight (kg)\"),\n    # A manual key\n    x.sec = guide_axis_base(\n      key = key_manual(\n        c(200, 400, 600, 800, 1000, 1200) / 60,\n        label = c(200, 400, 600, 800, 1000, 1200),\n        colour = rep(c(\"tomato\", \"dodgerblue\"), length.out = 6)\n      ),\n      title = \"minutes\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Complete guides\n\nThe package has a few 'complete' guides that are drop-in replacements for ggplot2's guides.\nSometimes, these attempt to literally mirror ggplot2's guides, give or take a few tweaks, like `guide_axis_base()` or `guide_legend_base()`.\nOther times, these convey novel relations between items, like `guide_axis_nested()` useful for indicating ranges, or `guide_legend_groups()` for indicating groups.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfood <- data.frame(\n  category = c(\"Meat\", \"Meat\", \"Vegetables\", \"Vegetables\", \"Dairy\"),\n  food     = c(\"Beef\", \"Chicken\", \"Carrots\", \"Onions\", \"Cheese\"),\n  gram     = c(85,  85, 150, 210, 225),\n  calories = c(245, 185, 45, 80, 240)\n)\n\nggplot(food, aes(interaction(food, category), calories)) +\n  geom_col(aes(fill = paste(category, food))) +\n  guides(\n    # Using a nested axis to visualise ranges innate to the data\n    x = \"axis_nested\", \n    # Split up legend into groups\n    fill = \"legend_group\",\n    # Custimising nested axis to display ranges\n    y = guide_axis_nested(\n      key_range_manual(0, 100, \"low calories\"),\n      # Local theme to rotate y-axis text for only this guide\n      theme = theme(axis.text.y.left = element_text(angle = 90, hjust = 0.5))\n    )\n  ) +\n  # Global theme\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nSee the accompanying [vignette](https://teunbrand.github.io/legendry/articles/tour.html) for more details.\nYou might wonder: \"the existence of the term 'complete guides' implies the existence of 'incomplete guides'\".\nYou'd be right.\nIn legendry, these are called 'primitives', like `primitive_bracket()`, for aesthetic-agnostic building blocks and 'gizmos', as in `gizmo_histogram()`, for speciality displays.\n\n### Composed guides\n\nThe last idea is that we should be able to assemble complicated guides from simpler parts.\nThere are ways to make regular guides, like `guide_axis_base()`, or even simpler guides, like `primitive_bracket()` and combine these to build rich annotations.\nThe way guides are combined is using `compose_*()` functions. For example `compose_ontop()` will overlay two guides, whereas `compose_stack()` will draw the second guide after the first guide.\nMoreover, you can have compositions inside compositions, so there is some room for creativity here.\nIt is somewhat of a tougher task to get right, so I've tried to elaborate some more in the [vignette](https://teunbrand.github.io/legendry/articles/guide_composition.html).\nAt any rate, here is an example of how guide composition can work.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair_dates <- data.frame(\n  year = as.Date(c(\"1974-01-01\", \"1985-01-01\", \"1994-01-01\", \"2008-01-01\")),\n  title = c(\"Little House\\non the Prairie\", \"The Golden\\nGirls\", \n            \"Friends\", \"Breaking\\nBad\")\n)\n\n# Let's say we want to display when the shows started with arrows\ntv_show_guide <- guide_axis_base(\n  key = key_map(air_dates, aesthetic = year, label = title),\n  # Local theme for long arrows as ticks\n  theme = theme(\n    axis.ticks.length = unit(14, \"pt\"),\n    axis.ticks = element_line(arrow = arrow(length = unit(2, \"mm\")))\n  )\n)\n\n# We'd like to place these arrows ontop of a regular guide\nontop <- compose_ontop(\"axis_base\", tv_show_guide)\n\n# In addition, we might want to annotate the ruling president at the time\npresident_guide <- primitive_bracket(\n  key = key_range_map(presidential, start = start, end = end, name = name),\n  bracket = \"square\"\n)\n\nggplot(economics, aes(date, unemploy)) +\n  geom_line() +\n  guides(x = compose_stack(ontop, president_guide))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## Future\n\nThe package is now in a usable state, which is reflected in its release to CRAN.\nMy hope is that together with people in the ggplot2 community, we can expand the set of guides even further!\nShould you find any bugs or have good ideas, the [issue tracker](https://github.com/teunbrand/legendry) on GitHub is the place where I track these. \n\nI'm looking forward to seeing some legendary plots out in the wilds!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}