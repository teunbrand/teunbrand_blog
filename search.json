[
  {
    "objectID": "posts/2024-11-01-legendry-0-1-0/index.html",
    "href": "posts/2024-11-01-legendry-0-1-0/index.html",
    "title": "Guidance for legendry",
    "section": "",
    "text": "I‚Äôm glad to announce that the legendry package has landed on CRAN! It is a ggplot2 extension package, focussed on expanding the guide options. If you‚Äôre looking to try out legendry yourself, you can install it with:\ninstall.packages(\"legendry\")\nI like plot annotations. Guides are among the most important plot annotations, as they instruct an observer on how a graphic should be interpreted. They are essential in getting the data to divulge their story.\nI‚Äôve always found it hard to place annotations outside the panels of a plot and usually resorted to post-editing the figures in vector graphics software such as Adobe Illustrator to nicely place these. However, as people might be aware, it can take several iterations to get from the first serious figure to the final figure you use in your communication. This makes editing the figures every time very cumbersome. In addition, it is not reproducible, so we should aim to incorporate some flexibility in annotating our figures. This package is my attempt at that."
  },
  {
    "objectID": "posts/2024-11-01-legendry-0-1-0/index.html#growing-this-package",
    "href": "posts/2024-11-01-legendry-0-1-0/index.html#growing-this-package",
    "title": "Guidance for legendry",
    "section": "Growing this package",
    "text": "Growing this package\nThe seed that sprouted this package germinated in April 2020. Hey, it was at a time when we all were looking into alternate hobbies when the lockdowns started! In any case, the idea started as guide_axis_nested() in ggh4x, which was ultimately reincarnated as: ‚Ä¶ guide_axis_nested().\nHowever, I took some convincing to take the guide related functionality in ggh4x and make an offshoot package. (Like any self-respecting amateur developer, I had no idea what the scope of ggh4x should be). The first graft of this offshoot was called ‚Äògguidance‚Äô, traditionally using the ‚Äògg‚Äô-prefix before ggplot2 extension packages, and it was about guides ü§∑Ô∏è.Nobody, including myself knew how to pronounce this name, so that is how ‚Äòlegendry‚Äô was born.\nAt the time, the issue was that the guide system, as one of the last vestiges in ggplot2, was still written in the S3 object oriented programming style. This lacked the great extensibility of other ggplot2 systems, like stats, geoms or facets that all uses the rather specialised ‚Äîbut highly flexible‚Äî ggproto system. As such, the guide system was explicitly advertised as not an extension point.\nIt took a bit of path clearing to build legendry. To cut a long story significantly shorter: I volunteered for the rewrite, got offered a job maintaining ggplot2, and midwifed the 3.5.0 release of ggplot2 which formally makes guides an extension point."
  },
  {
    "objectID": "posts/2024-11-01-legendry-0-1-0/index.html#concepts-in-legendry",
    "href": "posts/2024-11-01-legendry-0-1-0/index.html#concepts-in-legendry",
    "title": "Guidance for legendry",
    "section": "Concepts in legendry",
    "text": "Concepts in legendry\nThe package has website including vignettes to talk you through most of its functionality. As such, I‚Äôll try to convey the big picture ideas here and leave the details up for you to peruse at your leisure.\n\nScale interaction\nPerhaps the most gentle introduction is legendry is that you now have the power to intervene in what scales pass on to guides. Most guides in legendry accept a key argument, that you can customise to some degree. You can read more in the vignette, but here are three examples using axes.\n\nlibrary(legendry)\n#&gt; Loading required package: ggplot2\n\nggplot(msleep, aes(sleep_total, bodywt)) +\n  geom_point(na.rm = TRUE) +\n  scale_y_log10() +\n  guides(\n    # A regular key, but add minor ticks\n    x = guide_axis_base(key = \"minor\", title = \"Total sleep (hours)\"),\n    # A log key\n    y = guide_axis_base(key = \"log\", title = \"Body weight (kg)\"),\n    # A manual key\n    x.sec = guide_axis_base(\n      key = key_manual(\n        c(200, 400, 600, 800, 1000, 1200) / 60,\n        label = c(200, 400, 600, 800, 1000, 1200),\n        colour = rep(c(\"tomato\", \"dodgerblue\"), length.out = 6)\n      ),\n      title = \"minutes\"\n    )\n  )\n\n\n\n\n\n\n\n\n\n\nComplete guides\nThe package has a few ‚Äòcomplete‚Äô guides that are drop-in replacements for ggplot2‚Äôs guides. Sometimes, these attempt to literally mirror ggplot2‚Äôs guides, give or take a few tweaks, like guide_axis_base() or guide_legend_base(). Other times, these convey novel relations between items, like guide_axis_nested() useful for indicating ranges, or guide_legend_groups() for indicating groups.\n\nfood &lt;- data.frame(\n  category = c(\"Meat\", \"Meat\", \"Vegetables\", \"Vegetables\", \"Dairy\"),\n  food     = c(\"Beef\", \"Chicken\", \"Carrots\", \"Onions\", \"Cheese\"),\n  gram     = c(85,  85, 150, 210, 225),\n  calories = c(245, 185, 45, 80, 240)\n)\n\nggplot(food, aes(interaction(food, category), calories)) +\n  geom_col(aes(fill = paste(category, food))) +\n  guides(\n    # Using a nested axis to visualise ranges innate to the data\n    x = \"axis_nested\", \n    # Split up legend into groups\n    fill = \"legend_group\",\n    # Custimising nested axis to display ranges\n    y = guide_axis_nested(\n      key_range_manual(0, 100, \"low calories\"),\n      # Local theme to rotate y-axis text for only this guide\n      theme = theme(axis.text.y.left = element_text(angle = 90, hjust = 0.5))\n    )\n  ) +\n  # Global theme\n  theme_classic()\n\n\n\n\n\n\n\n\nSee the accompanying vignette for more details. You might wonder: ‚Äúthe existence of the term ‚Äòcomplete guides‚Äô implies the existence of ‚Äòincomplete guides‚Äô‚Äù. You‚Äôd be right. In legendry, these are called ‚Äòprimitives‚Äô, like primitive_bracket(), for aesthetic-agnostic building blocks and ‚Äògizmos‚Äô, as in gizmo_histogram(), for speciality displays.\n\n\nComposed guides\nThe last idea is that we should be able to assemble complicated guides from simpler parts. There are ways to make regular guides, like guide_axis_base(), or even simpler guides, like primitive_bracket() and combine these to build rich annotations. The way guides are combined is using compose_*() functions. For example compose_ontop() will overlay two guides, whereas compose_stack() will draw the second guide after the first guide. Moreover, you can have compositions inside compositions, so there is some room for creativity here. It is somewhat of a tougher task to get right, so I‚Äôve tried to elaborate some more in the vignette. At any rate, here is an example of how guide composition can work.\n\nair_dates &lt;- data.frame(\n  year = as.Date(c(\"1974-01-01\", \"1985-01-01\", \"1994-01-01\", \"2008-01-01\")),\n  title = c(\"Little House\\non the Prairie\", \"The Golden\\nGirls\", \n            \"Friends\", \"Breaking\\nBad\")\n)\n\n# Let's say we want to display when the shows started with arrows\ntv_show_guide &lt;- guide_axis_base(\n  key = key_map(air_dates, aesthetic = year, label = title),\n  # Local theme for long arrows as ticks\n  theme = theme(\n    axis.ticks.length = unit(14, \"pt\"),\n    axis.ticks = element_line(arrow = arrow(length = unit(2, \"mm\")))\n  )\n)\n\n# We'd like to place these arrows ontop of a regular guide\nontop &lt;- compose_ontop(\"axis_base\", tv_show_guide)\n\n# In addition, we might want to annotate the ruling president at the time\npresident_guide &lt;- primitive_bracket(\n  key = key_range_map(presidential, start = start, end = end, name = name),\n  bracket = \"square\"\n)\n\nggplot(economics, aes(date, unemploy)) +\n  geom_line() +\n  guides(x = compose_stack(ontop, president_guide))"
  },
  {
    "objectID": "posts/2024-11-01-legendry-0-1-0/index.html#future",
    "href": "posts/2024-11-01-legendry-0-1-0/index.html#future",
    "title": "Guidance for legendry",
    "section": "Future",
    "text": "Future\nThe package is now in a usable state, which is reflected in its release to CRAN. My hope is that together with people in the ggplot2 community, we can expand the set of guides even further! Should you find any bugs or have good ideas, the issue tracker on GitHub is the place where I track these.\nI‚Äôm looking forward to seeing some legendary plots out in the wilds!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Guidance for legendry\n\n\n\n\n\n\npackage\n\n\nannouncement\n\n\n\nWherein I announce a new package to expand your arsenal of guides\n\n\n\n\n\nNov 1, 2024\n\n\nTeun van den Brand\n\n\n\n\n\n\n\n\n\n\n\n\nHello world\n\n\n\n\n\n\nnews\n\n\n\nWherein I introduce myself\n\n\n\n\n\nOct 28, 2024\n\n\nTeun van den Brand\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Teun van den Brand is a consultant based in Amsterdam, the Netherlands. He currently works on open source tools for data visualisation, specifically ggplot2 in the R language for Posit, PBC."
  },
  {
    "objectID": "posts/2024-10-28-hello-world/index.html",
    "href": "posts/2024-10-28-hello-world/index.html",
    "title": "Hello world",
    "section": "",
    "text": "I‚Äôve never been a big blogger, so setting up my own blog is a bit of an unfamiliar process. As you are reading these words, I must have had achieved this goal despite inexperience.\nAt the time of writing, you might have stumbled upon this bloggy looking page through my activity coding in the R language. I suppose that in the future, this blog will serve some less fleeting, medium-form communication need from me to the rest of the world. I now think it will be mostly about R programming, data visualisation and ggplot2. But I certainly don‚Äôt know what the future holds. These communications will neither be perfect nor complete, but that shouldn‚Äôt stymy me from stirring up these word salads, nor stymy you from lurking about on the internet.\nAside from a few guest posts in another place, this is my first solo post and as such, I suppose some introduction is in order. Hello, my name is Teun1 van den Brand, I live in Amsterdam, The Netherlands and have been coding in R since 2017. Previously, I‚Äôve worked as a PhD student/researcher doing computational work in the analysis of chromatin biology in the lab of Elzo de Wit. Essentially I‚Äôve looked at a lot of DNA sequencing data from assays on chromatin folding and organisation, which I analysed mostly in R.\nDuring this time, I‚Äôve whipped up my fair share of scientific data visualisations in regular reporting, presentations and publications. I liked this part a lot. You can clearly see how differently an audience responds to a thought-out figure versus a data-dump of a figure. It engages the audience more, regardless of the obscurity of your field, which will yield more sharp-witted questions and relevant feedback for you. Naturally, this had put me into the orbit of ggplot2 as the most widely recognised visualisation paradigm in the R programming language. What started as a personal cookbook for wrangling ggplot2 figures in the exact shape I needed, turned into a collection of hacks mud-wrestling about under ggplot2‚Äôs hood, which eventually grew out to the extension package ggh4x. It perfectly fits the clich√© that somebody‚Äôs first package is a ‚Äòmiscellaneous‚Äô package.\nSomehow Thomas, who maintains ggplot2, must have noticed that my rummaging was sufficiently useful to offer me the opportunity to do this full time. So that is the way I‚Äôve stumbled from ggplot2‚Äôs orbit to landing a paid gig to do what I already loved doing."
  },
  {
    "objectID": "posts/2024-10-28-hello-world/index.html#footnotes",
    "href": "posts/2024-10-28-hello-world/index.html#footnotes",
    "title": "Hello world",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTeun (/t√∏Àên/) is a very Dutch name and pronounced similar to how one would say ‚Äòtewn‚Äô or ‚Äòtuwn‚Äô in English. You can hear somebody say it here‚Ü©Ô∏é"
  }
]